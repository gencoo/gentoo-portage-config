# default system toolchain: LLVM 9.0.0

# TODO: address remaining clang compile issues and create custom patches if possible
# TODO: [future] get rid of glibc and replace with something non-GNU (preferred: musl)

# enable debugging symbols for everything
# splitdebug is broken when using LLD as default linker
*/* nostrip.conf

# package manager config
sys-apps/portage portage.conf

# compiler and runtimes
sys-devel/gcc gnu-gcc.conf
sys-libs/glibc gnu-gcc.conf

sys-devel/clang clang.conf
sys-devel/llvm clang.conf
sys-libs/compiler-rt clang.conf
sys-libs/compiler-rt-sanitizers clang.conf
sys-libs/llvm-libunwind clang.conf
sys-libs/libcxx clang.conf
sys-libs/libcxxabi clang.conf
dev-util/lldb clang.conf

# requires at least POSIX extensions to build on Linux
dev-lang/go go-posix.conf

# requires temporary patching of the ebuild to allow custom CFLAGS
app-emulation/docker go-posix.conf

# low-level stuff
sys-kernel/* gnu-gcc.conf
sys-apps/kmod gnu-gcc.conf
sys-power/bbswitch gnu-gcc.conf
app-emulation/vmware-modules gnu-gcc.conf
sys-boot/grub gnu-gcc.conf

#x11-base/* gnu-gcc.conf
#x11-drivers/* gnu-gcc.conf
x11-drivers/nvidia-drivers gnu-gcc.conf

#x11-libs/* gnu-gcc.conf
#x11-libs/gtk+ clang.conf
#x11-libs/wxGTK clang.conf
#x11-libs/vte clang.conf

# compiles and links with my llvm toolchain, but see problem below
dev-lang/spidermonkey gnu-gcc.conf

# compiles with my llvm toolchain, but doesn't find existing symbols in mozjs for some reason
# the symbol in question:
#   void js::UnsafeTraceManuallyBarrieredEdge<JS::Value>(JSTracer*, JS::Value*, char const*)
# i tried several combinations with spidermonkey and polkit, but couldn't manage to solve it
# continue using gcc and gnu/gold for now
sys-auth/polkit gnu-gcc.conf

# error when building with optimizations
dev-libs/libgcrypt no-optimizations.conf

media-video/ffmpeg ffmpeg.conf

media-libs/x265 fpic.conf lld-text-relocations.conf

# several weird compiler errors, address them at some point
media-libs/vulkan-loader gnu-gcc.conf

media-libs/libraw c++11.conf
media-libs/libfpx c++11.conf ld-no-gnu.conf
media-gfx/graphicsmagick ld-no-gnu.conf

# compiles with clang, but doesn't work at all during runtime
# basically everything fails to start silently
# EDIT: found this -> https://wiki.winehq.org/Clang
#       tried it, still fails :(
app-emulation/wine-vanilla gnu-gcc.conf
app-emulation/wine-staging gnu-gcc.conf

dev-qt/qtwebengine j6.conf
dev-util/electron j6.conf

# TODO: explicitly requires GNU extensions like nested functions *reeee*
#       why can't the devs not stick to the ISO C Standard????
#       what's the point of GNU-hardcoding??
# the linux kernel and kernel modules depend on this for building, so this
# essential utility must be fixed !!
dev-libs/elfutils gnu-gcc.conf

# error: cannot specify -o when generating multiple output files
# this package is hardcoded to assume everyone uses gcc
# clang doesn't support the command line arguments given here
net-wireless/crda gnu-gcc.conf

# C++ standard violation here (depends on GNU extensions)
# error: static declaration of 'explicit_bzero' follows non-static declaration
net-misc/ofono gnu-gcc.conf

app-i18n/kcm-fcitx no-c++11-narrowing-error.conf

# TODO: check again with clang and see what the actual error is
sys-fs/inotify-tools gnu-gcc.conf

dev-cpp/clucene no-c++11-narrowing-error.conf

net-im/riot-desktop online-sandbox.conf

# incompatible with llvm libc++ (naming conflicts)
# see https://community.oracle.com/thread/3952592
sys-libs/db gnu-gcc.conf

# TODO: address linker errors with llvm/lld
# as workaround the GNU/gold linker can be used for now
# symbols are compatible with lld linked libraries :)
# lots of warnings are produced though (unused-command-line-argument)
# TODO: test with LLD 9.0 again, heavy improvements
#media-sound/sonic-visualiser gnu-ld.conf
#dev-util/cutter gnu-ld.conf
#media-libs/rubberband gnu-ld.conf
#dev-python/matplotlib gnu-ld.conf
#dev-db/mariadb-connector-c gnu-ld-bfd.conf
#app-backup/borgbackup gnu-ld.conf
#sys-apps/keyutils gnu-ld.conf
#net-dns/bind-tools gnu-ld.conf

# TODO: weird or faulty runtime behavior in those packages without the applied fixes
dev-lang/luajit libunwind.conf gnu-source.conf
app-emulation/libvirt libunwind.conf

# TODO: mariadb straight out doesn't work at all without GNU *rage*
# backtrace: dies at libunwind, before it libgcc_s sneaked in somehow fucking up everything
dev-db/mariadb gnu-gcc.conf

# allow usage of extensions for more modules
dev-lang/python gnu-source.conf define-linux.conf

# explicit usage of GNU extensions (incompatible with strict ISO C/C++ compliance)
# my clang compiler defaults to strict ISO compliance rather than GNU mode using a custom patch
# when not specifying the -std= flag, c17 and c++17 is used by default, rather than gnu99 and gnu++17
# my clang still supports some GNU extensions, but must be enabled explicitly to be used
dev-libs/libaio std-gnu99.conf
sys-fs/lvm2 std-gnu99.conf gnu-ld.conf
sys-fs/cryptsetup std-gnu99.conf
sys-fs/udisks std-gnu99.conf
dev-util/radare2 gnu-source.conf
sys-apps/kbd gnu-source.conf
net-wireless/hostapd std-gnu99.conf
dev-libs/libwacom std-gnu99.conf
