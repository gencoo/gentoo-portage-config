diff --git a/_dist/deps/sqlite/src/shell.c.in b/_dist/deps/sqlite/src/shell.c.in
index d8c57b4..472d1ae 100644
--- a/_dist/deps/sqlite/src/shell.c.in
+++ b/_dist/deps/sqlite/src/shell.c.in
@@ -56,6 +56,7 @@
 # define _LARGEFILE_SOURCE 1
 #endif
 
+#define _GNU_SOURCE
 #include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
diff --git a/_dist/deps/sqlite/tool/mksourceid.c b/_dist/deps/sqlite/tool/mksourceid.c
index 282f5c4..9c4e82c 100644
--- a/_dist/deps/sqlite/tool/mksourceid.c
+++ b/_dist/deps/sqlite/tool/mksourceid.c
@@ -10,6 +10,8 @@
 **      source file has changed, the SHA3 hash ends with "modified".
 **
 */
+#undef __GNUC__
+
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
@@ -540,24 +542,11 @@ struct SHA1Context {
  *
  * blk0le() for little-endian and blk0be() for big-endian.
  */
-#if __GNUC__ && (defined(__i386__) || defined(__x86_64__))
-/*
- * GCC by itself only generates left rotates.  Use right rotates if
- * possible to be kinder to dinky implementations with iterative rotate
- * instructions.
- */
-#define SHA_ROT(op, x, k) \
-        ({ unsigned int y; asm(op " %1,%0" : "=r" (y) : "I" (k), "0" (x)); y; })
-#define rol(x,k) SHA_ROT("roll", x, k)
-#define ror(x,k) SHA_ROT("rorl", x, k)
 
-#else
 /* Generic C equivalent */
 #define SHA_ROT(x,l,r) ((x) << (l) | (x) >> (r))
 #define rol(x,k) SHA_ROT(x,k,32-(k))
 #define ror(x,k) SHA_ROT(x,32-(k),k)
-#endif
-
 
 
 
