diff --git a/xbmc/input/InputManager.cpp b/xbmc/input/InputManager.cpp
index a4a4325..4e79f7a 100644
--- a/xbmc/input/InputManager.cpp
+++ b/xbmc/input/InputManager.cpp
@@ -126,7 +126,7 @@ bool CInputManager::ProcessMouse(int windowId)
 
   // Deactivate mouse if non-mouse action
   if (!mouseaction.IsMouse())
-    m_Mouse.SetActive(false);
+    m_Mouse.SetActive(true);
 
   // Consume ACTION_NOOP.
   // Some views or dialogs gets closed after any ACTION and
diff --git a/xbmc/input/mouse/MouseStat.cpp b/xbmc/input/mouse/MouseStat.cpp
index 347618e..3b104c1 100644
--- a/xbmc/input/mouse/MouseStat.cpp
+++ b/xbmc/input/mouse/MouseStat.cpp
@@ -217,28 +217,18 @@ void CMouseStat::SetResolution(int maxX, int maxY, float speedX, float speedY)
 void CMouseStat::SetActive(bool active /*=true*/)
 {
   m_lastActiveTime = CTimeUtils::GetFrameTime();
-  m_mouseState.active = active;
-  // we show the OS mouse if:
-  // 1. The mouse is active (it has been moved) AND
-  // 2. The XBMC mouse is disabled in settings AND
-  // 3. XBMC is not in fullscreen.
-  CWinSystemBase* winSystem = CServiceBroker::GetWinSystem();
-  if (winSystem)
-    winSystem->ShowOSMouse(m_mouseState.active && !IsEnabled() && !CServiceBroker::GetWinSystem()->IsFullScreen());
+  m_mouseState.active = true;
 }
 
-// IsActive - returns true if we have been active in the last MOUSE_ACTIVE_LENGTH period
 bool CMouseStat::IsActive()
 {
-  if (m_mouseState.active && (CTimeUtils::GetFrameTime() - m_lastActiveTime > MOUSE_ACTIVE_LENGTH))
-    SetActive(false);
-  return (m_mouseState.active && IsEnabled());
+  return m_mouseState.active;
 }
 
 void CMouseStat::SetEnabled(bool enabled)
 {
-  m_mouseEnabled = enabled;
-  SetActive(enabled);
+  m_mouseEnabled = true;
+  SetActive(true);
 }
 
 // IsEnabled - returns true if mouse is enabled
diff --git a/xbmc/windowing/X11/WinSystemX11.cpp b/xbmc/windowing/X11/WinSystemX11.cpp
index 6eb037e..228462a 100644
--- a/xbmc/windowing/X11/WinSystemX11.cpp
+++ b/xbmc/windowing/X11/WinSystemX11.cpp
@@ -103,13 +103,6 @@ bool CWinSystemX11::DestroyWindow()
   if (!m_mainWindow)
     return true;
 
-  if (m_invisibleCursor)
-  {
-    XUndefineCursor(m_dpy, m_mainWindow);
-    XFreeCursor(m_dpy, m_invisibleCursor);
-    m_invisibleCursor = 0;
-  }
-
   m_winEventsX11->Quit();
 
   XUnmapWindow(m_dpy, m_mainWindow);
@@ -468,10 +461,6 @@ bool CWinSystemX11::IsCurrentOutput(std::string output)
 
 void CWinSystemX11::ShowOSMouse(bool show)
 {
-  if (show)
-    XUndefineCursor(m_dpy,m_mainWindow);
-  else if (m_invisibleCursor)
-    XDefineCursor(m_dpy,m_mainWindow, m_invisibleCursor);
 }
 
 std::unique_ptr<IOSScreenSaver> CWinSystemX11::GetOSScreenSaverImpl()
@@ -759,17 +748,6 @@ bool CWinSystemX11::SetWindow(int width, int height, bool fullscreen, const std:
       }
     }
 
-    // define invisible cursor
-    Pixmap bitmapNoData;
-    XColor black;
-    static char noData[] = { 0,0,0,0,0,0,0,0 };
-    black.red = black.green = black.blue = 0;
-
-    bitmapNoData = XCreateBitmapFromData(m_dpy, m_mainWindow, noData, 8, 8);
-    m_invisibleCursor = XCreatePixmapCursor(m_dpy, bitmapNoData, bitmapNoData,
-                                            &black, &black, 0, 0);
-    XFreePixmap(m_dpy, bitmapNoData);
-    XDefineCursor(m_dpy,m_mainWindow, m_invisibleCursor);
     XFree(vi);
 
     //init X11 events
