diff --git a/xbmc/windowing/X11/WinSystemX11.cpp b/xbmc/windowing/X11/WinSystemX11.cpp
index 6eb037e..228462a 100644
--- a/xbmc/windowing/X11/WinSystemX11.cpp
+++ b/xbmc/windowing/X11/WinSystemX11.cpp
@@ -103,13 +103,6 @@ bool CWinSystemX11::DestroyWindow()
   if (!m_mainWindow)
     return true;
 
-  if (m_invisibleCursor)
-  {
-    XUndefineCursor(m_dpy, m_mainWindow);
-    XFreeCursor(m_dpy, m_invisibleCursor);
-    m_invisibleCursor = 0;
-  }
-
   m_winEventsX11->Quit();
 
   XUnmapWindow(m_dpy, m_mainWindow);
@@ -468,10 +461,6 @@ bool CWinSystemX11::IsCurrentOutput(std::string output)
 
 void CWinSystemX11::ShowOSMouse(bool show)
 {
-  if (show)
-    XUndefineCursor(m_dpy,m_mainWindow);
-  else if (m_invisibleCursor)
-    XDefineCursor(m_dpy,m_mainWindow, m_invisibleCursor);
 }
 
 std::unique_ptr<IOSScreenSaver> CWinSystemX11::GetOSScreenSaverImpl()
@@ -759,17 +748,6 @@ bool CWinSystemX11::SetWindow(int width, int height, bool fullscreen, const std:
       }
     }
 
-    // define invisible cursor
-    Pixmap bitmapNoData;
-    XColor black;
-    static char noData[] = { 0,0,0,0,0,0,0,0 };
-    black.red = black.green = black.blue = 0;
-
-    bitmapNoData = XCreateBitmapFromData(m_dpy, m_mainWindow, noData, 8, 8);
-    m_invisibleCursor = XCreatePixmapCursor(m_dpy, bitmapNoData, bitmapNoData,
-                                            &black, &black, 0, 0);
-    XFreePixmap(m_dpy, bitmapNoData);
-    XDefineCursor(m_dpy,m_mainWindow, m_invisibleCursor);
     XFree(vi);
 
     //init X11 events
