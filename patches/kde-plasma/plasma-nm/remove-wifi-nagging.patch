diff --git a/libs/handler.cpp b/libs/handler.cpp
index b0a0da7..68f249d 100644
--- a/libs/handler.cpp
+++ b/libs/handler.cpp
@@ -405,9 +405,7 @@ void Handler::enableBluetooth(bool enable)
             if (reply.isValid()) {
                 for (const QDBusObjectPath &path : reply.value().keys()) {
                     const QString objPath = path.path();
-                    qCDebug(PLASMA_NM) << "inspecting path" << objPath;
                     const QStringList interfaces = reply.value().value(path).keys();
-                    qCDebug(PLASMA_NM) << "interfaces:" << interfaces;
                     if (interfaces.contains("org.bluez.Adapter1")) {
                         // We need to check previous state first
                         if (!enable) {
@@ -520,7 +518,6 @@ void Handler::requestScan(const QString &interface)
                     } else if (lastRequestScan.isValid() && lastRequestScan.msecsTo(now) < NM_REQUESTSCAN_LIMIT_RATE) {
                         timeout = NM_REQUESTSCAN_LIMIT_RATE - lastRequestScan.msecsTo(now);
                     }
-                    qCDebug(PLASMA_NM) << "Rescheduling a request scan for" << wifiDevice->interfaceName() << "in" << timeout;
                     scheduleRequestScan(wifiDevice->interfaceName(), timeout);
 
                     if (!interface.isEmpty()) {
@@ -532,7 +529,6 @@ void Handler::requestScan(const QString &interface)
                     delete m_wirelessScanRetryTimer.take(interface);
                 }
 
-                qCDebug(PLASMA_NM) << "Requesting wifi scan on device" << wifiDevice->interfaceName();
                 QDBusPendingReply<> reply = wifiDevice->requestScan();
                 QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(reply, this);
                 watcher->setProperty("action", Handler::RequestScan);
@@ -659,8 +655,6 @@ bool Handler::checkRequestScanRateLimit(const NetworkManager::WirelessDevice::Pt
     ret |= lastRequestScan.isValid() && lastRequestScan.msecsTo(now) < NM_REQUESTSCAN_LIMIT_RATE;
     // skip the request scan
     if (ret) {
-        qCDebug(PLASMA_NM) << "Last scan finished " << lastScan.msecsTo(now) << "ms ago and last request scan was sent "
-                           << lastRequestScan.msecsTo(now) << "ms ago, Skipping scanning interface:" << wifiDevice->interfaceName();
         return false;
     }
     return true;
@@ -783,7 +777,6 @@ void Handler::replyFinished(QDBusPendingCallWatcher * watcher)
             case Handler::RequestScan:
             {
                 const QString interface = watcher->property("interface").toString();
-                qCWarning(PLASMA_NM) << "Wireless scan on" << interface << "failed:" << error;
                 scanRequestFailed(interface);
                 break;
             }
@@ -819,7 +812,6 @@ void Handler::replyFinished(QDBusPendingCallWatcher * watcher)
                 notification->setText(i18n("Connection %1 has been updated", watcher->property("connection").toString()));
                 break;
             case Handler::RequestScan:
-                qCDebug(PLASMA_NM) << "Wireless scan on" << watcher->property("interface").toString() << "succeeded";
                 break;
             default:
                 break;
