diff --git a/src/tasks/tasksservice.cpp b/src/tasks/tasksservice.cpp
index 78954bd..0fa990d 100644
--- a/src/tasks/tasksservice.cpp
+++ b/src/tasks/tasksservice.cpp
@@ -42,100 +42,44 @@ namespace Private
     ObjectPtr JSONToTaskList(const QVariantMap &jsonData);
     ObjectPtr JSONToTask(const QVariantMap &jsonData);
 
-    static const QUrl GoogleApisUrl(QStringLiteral("https://www.googleapis.com"));
-    static const QString TasksBasePath(QStringLiteral("/tasks/v1/lists"));
-    static const QString TasksListsBasePath(QStringLiteral("/tasks/v1/users/@me/lists"));
+    static const QUrl GoogleApisUrl;
+    static const QString TasksBasePath;
+    static const QString TasksListsBasePath;
 }
 
 ObjectsList parseJSONFeed(const QByteArray& jsonFeed, FeedData& feedData)
 {
-    QJsonDocument document = QJsonDocument::fromJson(jsonFeed);
-    if (document.isNull()) {
-        return ObjectsList();
-    }
-
-    ObjectsList list;
-    const QVariantMap feed = document.toVariant().toMap();
-
-    if (feed.value(QStringLiteral("kind")).toString() == QLatin1String("tasks#taskLists")) {
-        list = Private::parseTaskListJSONFeed(feed.value(QStringLiteral("items")).toList());
-
-        if (feed.contains(QStringLiteral("nextPageToken"))) {
-            feedData.nextPageUrl = fetchTaskListsUrl();
-            QUrlQuery query(feedData.nextPageUrl);
-            query.addQueryItem(QStringLiteral("pageToken"), feed.value(QStringLiteral("nextPageToken")).toString());
-            if (query.queryItemValue(QStringLiteral("maxResults")).isEmpty()) {
-                query.addQueryItem(QStringLiteral("maxResults"), QStringLiteral("20"));
-            }
-            feedData.nextPageUrl.setQuery(query);
-        }
-
-    } else if (feed.value(QStringLiteral("kind")).toString() == QLatin1String("tasks#tasks")) {
-        list = Private::parseTasksJSONFeed(feed.value(QStringLiteral("items")).toList());
-
-        if (feed.contains(QStringLiteral("nextPageToken"))) {
-            QString taskListId = feedData.requestUrl.toString().remove(QStringLiteral("https://www.googleapis.com/tasks/v1/lists/"));
-            taskListId = taskListId.left(taskListId.indexOf(QLatin1Char('/')));
-
-            feedData.nextPageUrl = fetchAllTasksUrl(taskListId);
-            QUrlQuery query(feedData.nextPageUrl);
-            query.addQueryItem(QStringLiteral("pageToken"), feed.value(QStringLiteral("nextPageToken")).toString());
-            if (query.queryItemValue(QStringLiteral("maxResults")).isEmpty()) {
-                query.addQueryItem(QStringLiteral("maxResults"), QStringLiteral("20"));
-            }
-            feedData.nextPageUrl.setQuery(query);
-        }
-    }
-
-    return list;
+    return {};
 }
 
 QUrl fetchAllTasksUrl(const QString& tasklistID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksBasePath % QLatin1Char('/') % tasklistID % QLatin1String("/tasks"));
-    return url;
+    return {};
 }
 
 QUrl fetchTaskUrl(const QString& tasklistID, const QString& taskID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksBasePath % QLatin1Char('/') % tasklistID % QLatin1String("/tasks/") % taskID);
-    return url;
+    return {};
 }
 
 QUrl createTaskUrl(const QString& tasklistID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksBasePath % QLatin1Char('/') % tasklistID % QLatin1String("/tasks"));
-    return url;
+    return {};
 }
 
 QUrl updateTaskUrl(const QString& tasklistID, const QString& taskID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksBasePath % QLatin1Char('/') % tasklistID % QLatin1String("/tasks/") % taskID);
-    return url;
+    return {};
 }
 
 QUrl removeTaskUrl(const QString& tasklistID, const QString& taskID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksBasePath % QLatin1Char('/') % tasklistID % QLatin1String("/tasks/") % taskID);
-    return url;
+    return {};
 }
 
 QUrl moveTaskUrl(const QString& tasklistID, const QString& taskID, const QString& newParent)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksBasePath % QLatin1Char('/') % tasklistID % QLatin1String("/tasks/") % taskID % QLatin1String("/move"));
-    if (!newParent.isEmpty()) {
-        QUrlQuery query(url);
-        query.addQueryItem(QStringLiteral("parent"), newParent);
-        url.setQuery(query);
-    }
-
-    return url;
+    return {};
 }
 
 QUrl fetchTaskListsUrl()
@@ -147,23 +91,17 @@ QUrl fetchTaskListsUrl()
 
 QUrl createTaskListUrl()
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksListsBasePath);
-    return url;
+    return {};
 }
 
 QUrl updateTaskListUrl(const QString& tasklistID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksListsBasePath % QLatin1Char('/') % tasklistID);
-    return url;
+    return {};
 }
 
 QUrl removeTaskListUrl(const QString& tasklistID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksListsBasePath % QLatin1Char('/') % tasklistID);
-    return url;
+    return {};
 }
 
 /******************************* PRIVATE ******************************/
@@ -171,11 +109,6 @@ QUrl removeTaskListUrl(const QString& tasklistID)
 ObjectPtr Private::JSONToTaskList(const QVariantMap &jsonData)
 {
     TaskListPtr taskList(new TaskList());
-
-    taskList->setUid(jsonData.value(QStringLiteral("id")).toString());
-    taskList->setEtag(jsonData.value(QStringLiteral("etag")).toString());
-    taskList->setTitle(jsonData.value(QStringLiteral("title")).toString());
-
     return taskList.dynamicCast<Object>();
 }
 
@@ -194,33 +127,6 @@ TaskListPtr JSONToTaskList(const QByteArray& jsonData)
 ObjectPtr Private::JSONToTask(const QVariantMap &jsonData)
 {
     TaskPtr task(new Task());
-
-    task->setUid(jsonData.value(QStringLiteral("id")).toString());
-    task->setEtag(jsonData.value(QStringLiteral("etag")).toString());
-    task->setSummary(jsonData.value(QStringLiteral("title")).toString());
-    task->setLastModified(Utils::rfc3339DateFromString(jsonData.value(QStringLiteral("updated")).toString()));
-    task->setDescription(jsonData.value(QStringLiteral("notes")).toString());
-
-    if (jsonData.value(QStringLiteral("status")).toString() == QStringLiteral("needsAction")) {
-        task->setStatus(KCalendarCore::Incidence::StatusNeedsAction);
-    } else if (jsonData.value(QStringLiteral("status")).toString() == QStringLiteral("completed")) {
-        task->setStatus(KCalendarCore::Incidence::StatusCompleted);
-    } else {
-        task->setStatus(KCalendarCore::Incidence::StatusNone);
-    }
-
-    task->setDtDue(Utils::rfc3339DateFromString(jsonData.value(QStringLiteral("due")).toString()));
-
-    if (task->status() == KCalendarCore::Incidence::StatusCompleted) {
-        task->setCompleted(Utils::rfc3339DateFromString(jsonData.value(QStringLiteral("completed")).toString()));
-    }
-
-    task->setDeleted(jsonData.value(QStringLiteral("deleted")).toBool());
-
-    if (jsonData.contains(QStringLiteral("parent"))) {
-        task->setRelatedTo(jsonData.value(QStringLiteral("parent")).toString(), KCalendarCore::Incidence::RelTypeParent);
-    }
-
     return task.dynamicCast<Object>();
 }
 
