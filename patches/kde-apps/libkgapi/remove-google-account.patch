diff --git a/src/core/accountinfo/accountinfofetchjob.cpp b/src/core/accountinfo/accountinfofetchjob.cpp
index b88ecd1..e5093d8 100644
--- a/src/core/accountinfo/accountinfofetchjob.cpp
+++ b/src/core/accountinfo/accountinfofetchjob.cpp
@@ -49,34 +49,11 @@ AccountInfoFetchJob::~AccountInfoFetchJob()
 
 void AccountInfoFetchJob::start()
 {
-    const QUrl url = QUrl(QStringLiteral("https://www.googleapis.com/oauth2/v1/userinfo"));
-    QNetworkRequest request(url);
-
-    QStringList headers;
-    const auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : qAsConst(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    enqueueRequest(request);
 }
 
 ObjectsList AccountInfoFetchJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray& rawData)
 {
-    ObjectsList items;
-
-    const QString contentType = reply->header(QNetworkRequest::ContentTypeHeader).toString();
-    ContentType ct = Utils::stringToContentType(contentType);
-    if (ct == KGAPI2::JSON) {
-        items << AccountInfo::fromJSON(rawData);
-    } else {
-        setError(KGAPI2::InvalidResponse);
-        setErrorString(tr("Invalid response content type"));
-        emitFinished();
-    }
-
-    return items;
+    return {};
 }
 
 #include "moc_accountinfofetchjob.cpp"
diff --git a/src/core/authjob.cpp b/src/core/authjob.cpp
index a449c18..606f13f 100644
--- a/src/core/authjob.cpp
+++ b/src/core/authjob.cpp
@@ -91,22 +91,6 @@ QWidget* AuthJob::Private::fullAuthentication()
 
 void AuthJob::Private::refreshTokens()
 {
-    static_cast<Job*>(q)->d->accessManager->setCookieJar(new QNetworkCookieJar);
-
-    QNetworkRequest request;
-
-    request.setUrl(QUrl(QStringLiteral("https://accounts.google.com/o/oauth2/token")));
-    request.setHeader(QNetworkRequest::ContentTypeHeader, QStringLiteral("application/x-www-form-urlencoded"));
-
-    QUrlQuery params;
-    params.addQueryItem(QStringLiteral("client_id"), apiKey);
-    params.addQueryItem(QStringLiteral("client_secret"), secretKey);
-    params.addQueryItem(QStringLiteral("refresh_token"), account->refreshToken());
-    params.addQueryItem(QStringLiteral("grant_type"), QStringLiteral("refresh_token"));
-
-    qCDebug(KGAPIDebug) << "Requesting token refresh.";
-
-    q->enqueueRequest(request, params.toString(QUrl::FullyEncoded).toLatin1());
 }
 
 void AuthJob::Private::_k_fullAuthenticationFailed(Error errorCode, const QString &errorMessage)
@@ -174,28 +158,6 @@ void AuthJob::setPassword(const QString& password)
 
 void AuthJob::handleReply(const QNetworkReply *reply, const QByteArray& rawData)
 {
-    Q_UNUSED(reply);
-
-    QJsonDocument document = QJsonDocument::fromJson(rawData);
-    if (document.isNull()) {
-        setError(KGAPI2::InvalidResponse);
-        setErrorString(tr("Failed to parse newly fetched tokens"));
-        emitFinished();
-        return;
-    }
-
-    QVariantMap map = document.toVariant().toMap();
-
-    /* Expected structure:
-     * {
-     *  "access_token": "the_access_token",
-     *  "token_type":"Bearer",
-     *  "expires_in":3600
-     * }
-     */
-    const qlonglong expiresIn = map.value(QStringLiteral("expires_in")).toLongLong();
-    d->account->setExpireDateTime(QDateTime::currentDateTime().addSecs(expiresIn));
-    d->account->setAccessToken(map.value(QStringLiteral("access_token")).toString());
     emitFinished();
 }
 
@@ -208,65 +170,6 @@ void AuthJob::dispatchRequest(QNetworkAccessManager* accessManager, const QNetwo
 
 void AuthJob::start()
 {
-    AuthWidget *widget = nullptr;
-
-    if (d->account->refreshToken().isEmpty() || (d->account->m_scopesChanged == true)) {
-
-        d->account->addScope(Account::accountInfoEmailScopeUrl());
-
-        /* Pre-fill the username in the dialog so that user knows what account
-         * (s)he is re-authenticating for */
-        if (!d->account->accountName().isEmpty() && d->username.isEmpty()) {
-            d->username = d->account->accountName();
-        }
-
-        widget = qobject_cast<AuthWidget*>(d->fullAuthentication());
-
-    } else {
-
-        if (d->account->accountName().isEmpty()) {
-            setError(KGAPI2::InvalidAccount);
-            setErrorString(tr("Account name is empty"));
-            emitFinished();
-            return;
-        }
-
-        d->refreshTokens();
-    }
-
-    if (widget) {
-        d->dialog = new QDialog();
-        d->dialog->setModal(true);
-        d->dialog->resize(840, 760);
-        KWindowSystem::setMainWindow(d->dialog, KWindowSystem::activeWindow());
-
-        QVBoxLayout *layout = new QVBoxLayout(d->dialog);
-        layout->addWidget(widget, 2);
-
-        QDialogButtonBox *buttons = new QDialogButtonBox(QDialogButtonBox::Cancel, Qt::Horizontal, d->dialog);
-        layout->addWidget(buttons, 0);
-
-        connect(buttons, &QDialogButtonBox::rejected,
-                this, [this]() {
-                    d->_k_destructDelayed();
-                    d->_k_fullAuthenticationFailed(AuthCancelled, tr("Authentication canceled"));
-                });
-        connect(widget, &AuthWidget::authenticated,
-                this, [this](const KGAPI2::AccountPtr &account) {
-                    d->_k_destructDelayed();
-                    d->_k_fullAuthenticationFinished(account);
-                });
-        connect(widget, &AuthWidget::error,
-                this, [this](KGAPI2::Error error, const QString &str) {
-                    d->_k_destructDelayed();
-                    d->_k_fullAuthenticationFailed(error, str);
-                });
-
-        d->dialog->show();
-        buttons->button(QDialogButtonBox::Cancel)->setDefault(false); // QTBUG-66109
-
-        widget->authenticate();
-    }
 }
 
 
diff --git a/src/core/job.cpp b/src/core/job.cpp
index 79b2b9d..28825f9 100644
--- a/src/core/job.cpp
+++ b/src/core/job.cpp
@@ -66,34 +66,10 @@ FileLogger *FileLogger::self()
 
 void FileLogger::logRequest(const QNetworkRequest &request, const QByteArray &rawData)
 {
-    if (!mFile) {
-        return;
-    }
-
-    QTextStream stream(mFile.data());
-    stream << "C: " << request.url().toDisplayString() << "\n";
-    const auto headers = request.rawHeaderList();
-    for (const auto &header : headers) {
-        stream << "   " << header << ": " << request.rawHeader(header) << "\n";
-    }
-    stream << "   " << rawData << "\n\n";
-    mFile->flush();
 }
 
 void FileLogger::logReply(const QNetworkReply *reply, const QByteArray &rawData)
 {
-    if (!mFile) {
-        return;
-    }
-
-    QTextStream stream(mFile.data());
-    stream << "S: " << reply->url().toDisplayString() << "\n";
-    const auto headers = reply->rawHeaderList();
-    for (const auto &header : headers) {
-        stream << "   " << header << ": " << reply->rawHeader(header) << "\n";
-    }
-    stream << "   " << rawData << "\n\n";
-    mFile->flush();
 }
 
 
diff --git a/src/core/private/newtokensfetchjob.cpp b/src/core/private/newtokensfetchjob.cpp
index 1e752d1..6add5b2 100644
--- a/src/core/private/newtokensfetchjob.cpp
+++ b/src/core/private/newtokensfetchjob.cpp
@@ -97,19 +97,6 @@ qulonglong NewTokensFetchJob::expiresIn() const
 
 void NewTokensFetchJob::start()
 {
-    QNetworkRequest request;
-
-    request.setUrl(QUrl(QStringLiteral("https://accounts.google.com/o/oauth2/token")));
-    request.setHeader(QNetworkRequest::ContentTypeHeader, QLatin1String("application/x-www-form-urlencoded"));
-
-    QUrlQuery params;
-    params.addQueryItem(QStringLiteral("client_id"), d->apiKey);
-    params.addQueryItem(QStringLiteral("client_secret"), d->secretKey);
-    params.addQueryItem(QStringLiteral("code"), d->tmpToken);
-    params.addQueryItem(QStringLiteral("redirect_uri"), QStringLiteral("http://127.0.0.1:%1").arg(d->localPort)); // we need to use the same URL as in AuthWidget
-    params.addQueryItem(QStringLiteral("grant_type"), QStringLiteral("authorization_code"));
-
-    enqueueRequest(request, params.toString(QUrl::FullyEncoded).toLatin1());
 }
 
 void NewTokensFetchJob::dispatchRequest(QNetworkAccessManager* accessManager, const QNetworkRequest& request, const QByteArray& data, const QString& contentType)
@@ -121,23 +108,6 @@ void NewTokensFetchJob::dispatchRequest(QNetworkAccessManager* accessManager, co
 
 void NewTokensFetchJob::handleReply(const QNetworkReply *reply, const QByteArray& rawData)
 {
-    Q_UNUSED(reply);
-
-    QJsonDocument document = QJsonDocument::fromJson(rawData);
-    if (document.isNull()) {
-        qCWarning(KGAPIDebug) << "Failed to parse server response.";
-        qCDebug(KGAPIDebug) << rawData;
-        setError(KGAPI2::AuthCancelled);
-        setErrorString(tr("Failed to parse server response."));
-        return;
-    }
-    QVariantMap parsed_data = document.toVariant().toMap();
-
-    qCDebug(KGAPIDebug) << "Retrieved new tokens pair.";
-
-    d->accessToken = parsed_data.value(QStringLiteral("access_token")).toString();
-    d->refreshToken = parsed_data.value(QStringLiteral("refresh_token")).toString();
-    d->expiresIn = parsed_data.value(QStringLiteral("expires_in")).toULongLong();
 }
 
 
