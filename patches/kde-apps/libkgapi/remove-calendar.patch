diff --git a/src/calendar/calendarcreatejob.cpp b/src/calendar/calendarcreatejob.cpp
index 7ab4f25..01c1c73 100644
--- a/src/calendar/calendarcreatejob.cpp
+++ b/src/calendar/calendarcreatejob.cpp
@@ -63,26 +63,6 @@ CalendarCreateJob::~CalendarCreateJob()
 
 void CalendarCreateJob::start()
 {
-    if (d->calendars.atEnd()) {
-        emitFinished();
-        return;
-    }
-
-    CalendarPtr calendar = d->calendars.current();
-    const QUrl url = CalendarService::createCalendarUrl();
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", CalendarService::APIVersion().toLatin1());
-
-    const QByteArray rawData = CalendarService::calendarToJSON(calendar);
-
-    QStringList headers;
-    const auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : qAsConst(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    enqueueRequest(request, rawData, QStringLiteral("application/json"));
 }
 
 ObjectsList CalendarCreateJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray& rawData)
diff --git a/src/calendar/calendardeletejob.cpp b/src/calendar/calendardeletejob.cpp
index 2450969..6482aeb 100644
--- a/src/calendar/calendardeletejob.cpp
+++ b/src/calendar/calendardeletejob.cpp
@@ -75,24 +75,6 @@ CalendarDeleteJob::~CalendarDeleteJob()
 
 void CalendarDeleteJob::start()
 {
-    if (d->calendarsIds.atEnd()) {
-        emitFinished();
-        return;
-    }
-
-    const QString calendarId = d->calendarsIds.current();
-    const QUrl url = CalendarService::removeCalendarUrl(calendarId);
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", CalendarService::APIVersion().toLatin1());
-
-    QStringList headers;
-    const auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : qAsConst(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    enqueueRequest(request);
 }
 
 void CalendarDeleteJob::handleReply(const QNetworkReply* reply, const QByteArray& rawData)
diff --git a/src/calendar/calendarfetchjob.cpp b/src/calendar/calendarfetchjob.cpp
index 6f2ef7d..da1a06a 100644
--- a/src/calendar/calendarfetchjob.cpp
+++ b/src/calendar/calendarfetchjob.cpp
@@ -87,14 +87,6 @@ CalendarFetchJob::~CalendarFetchJob()
 
 void CalendarFetchJob::start()
 {
-    QUrl url;
-    if (d->calendarId.isEmpty()) {
-        url = CalendarService::fetchCalendarsUrl();
-    } else {
-        url = CalendarService::fetchCalendarUrl(d->calendarId);
-    }
-    const QNetworkRequest request = d->createRequest(url);
-    enqueueRequest(request);
 }
 
 ObjectsList CalendarFetchJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray& rawData)
diff --git a/src/calendar/calendarmodifyjob.cpp b/src/calendar/calendarmodifyjob.cpp
index 0e77a08..821b987 100644
--- a/src/calendar/calendarmodifyjob.cpp
+++ b/src/calendar/calendarmodifyjob.cpp
@@ -61,27 +61,6 @@ CalendarModifyJob::~CalendarModifyJob()
 
 void CalendarModifyJob::start()
 {
-    if (d->calendars.atEnd()) {
-        emitFinished();
-        return;
-    }
-
-    const CalendarPtr calendar = d->calendars.current();
-
-    const QUrl url = CalendarService::updateCalendarUrl(calendar->uid());
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", CalendarService::APIVersion().toLatin1());
-
-    const QByteArray rawData = CalendarService::calendarToJSON(calendar);
-
-    QStringList headers;
-    const auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : qAsConst(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    enqueueRequest(request, rawData, QStringLiteral("application/json"));
 }
 
 ObjectsList CalendarModifyJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray& rawData)
diff --git a/src/calendar/calendarservice.cpp b/src/calendar/calendarservice.cpp
index 132154c..8ee62f8 100644
--- a/src/calendar/calendarservice.cpp
+++ b/src/calendar/calendarservice.cpp
@@ -70,180 +70,95 @@ ObjectPtr JSONToEvent(const QVariantMap &data, const QString &timezone = QString
      */
 QString checkAndConverCDOTZID(const QString &tzid, const EventPtr& event);
 
-static const QUrl GoogleApisUrl(QStringLiteral("https://www.googleapis.com"));
-static const QString CalendarListBasePath(QStringLiteral("/calendar/v3/users/me/calendarList"));
-static const QString CalendarBasePath(QStringLiteral("/calendar/v3/calendars"));
+static const QUrl GoogleApisUrl;
+static const QString CalendarListBasePath;
+static const QString CalendarBasePath;
 }
 
 /************* URLS **************/
 
 QUrl fetchCalendarsUrl()
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarListBasePath);
-    return url;
+    return {};
 }
 
 QUrl fetchCalendarUrl(const QString& calendarID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarListBasePath % QLatin1Char('/') % calendarID);
-    return url;
+    return {};
 }
 
 QUrl updateCalendarUrl(const QString &calendarID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID);
-    return url;
+    return {};
 }
 
 QUrl createCalendarUrl()
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath);
-    return url;
+    return {};
 }
 
 QUrl removeCalendarUrl(const QString& calendarID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID);
-    return url;
+    return {};
 }
 
 QUrl fetchEventsUrl(const QString& calendarID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID % QLatin1String("/events"));
-    return url;
+    return {};
 }
 
 QUrl fetchEventUrl(const QString& calendarID, const QString& eventID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID % QLatin1String("/events/") % eventID);
-    return url;
+    return {};
 }
 
 namespace {
 
 QString sendUpdatesPolicyToString(SendUpdatesPolicy policy)
 {
-    switch (policy) {
-    case SendUpdatesPolicy::All:
-        return QStringLiteral("all");
-    case SendUpdatesPolicy::ExternalOnly:
-        return QStringLiteral("externalOnly");
-    case SendUpdatesPolicy::None:
-        return QStringLiteral("none");
-    }
-    Q_UNREACHABLE();
+    return QStringLiteral("none");
 }
 
 }
 
 QUrl updateEventUrl(const QString& calendarID, const QString& eventID, SendUpdatesPolicy updatePolicy)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID % QLatin1String("/events/") % eventID);
-    QUrlQuery query(url);
-    query.addQueryItem(QStringLiteral("sendUpdates"), sendUpdatesPolicyToString(updatePolicy));
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 QUrl createEventUrl(const QString& calendarID, SendUpdatesPolicy updatePolicy)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID % QLatin1String("/events"));
-    QUrlQuery query(url);
-    query.addQueryItem(QStringLiteral("sendUpdates"), sendUpdatesPolicyToString(updatePolicy));
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 QUrl removeEventUrl(const QString& calendarID, const QString& eventID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID % QLatin1String("/events/") % eventID);
-    return url;
+    return {};
 }
 
 QUrl moveEventUrl(const QString& sourceCalendar, const QString& destCalendar, const QString& eventID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % sourceCalendar % QLatin1String("/events/") % eventID);
-    QUrlQuery query(url);
-    query.addQueryItem(QStringLiteral("destination"), destCalendar);
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 QUrl freeBusyQueryUrl()
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(QStringLiteral("/calendar/v3/freeBusy"));
-    return url;
+    return {};
 }
 
 QString APIVersion()
 {
-    return QStringLiteral("3");
+    return {};
 }
 
 CalendarPtr JSONToCalendar(const QByteArray& jsonData)
 {
-    QJsonDocument document = QJsonDocument::fromJson(jsonData);
-    QVariantMap calendar = document.toVariant().toMap();
-
-    if ((calendar.value(QStringLiteral("kind")) != QLatin1String("calendar#calendarListEntry")) &&
-            (calendar.value(QStringLiteral("kind")) != QLatin1String("calendar#calendar"))) {
-        return CalendarPtr();
-    }
-
-    return Private::JSONToCalendar(calendar).staticCast<Calendar>();
+    return {};
 }
 
 ObjectPtr Private::JSONToCalendar(const QVariantMap& data)
 {
     CalendarPtr calendar(new Calendar);
-
-    QString id = QUrl::fromPercentEncoding(data.value(QStringLiteral("id")).toByteArray());
-    calendar->setUid(id);
-    calendar->setEtag(data.value(QStringLiteral("etag")).toString());
-    calendar->setTitle(data.value(QStringLiteral("summary")).toString());
-    calendar->setDetails(data.value(QStringLiteral("description")).toString());
-    calendar->setLocation(data.value(QStringLiteral("location")).toString());
-    calendar->setTimezone(data.value(QStringLiteral("timeZone")).toString());
-    calendar->setBackgroundColor(QColor(data.value(QStringLiteral("backgroundColor")).toString()));
-    calendar->setForegroundColor(QColor(data.value(QStringLiteral("foregroundColor")).toString()));
-
-    if ((data.value(QStringLiteral("accessRole")).toString() == QLatin1String("writer")) ||
-            (data.value(QStringLiteral("accessRole")).toString() == QLatin1String("owner"))) {
-        calendar->setEditable(true);
-    } else {
-        calendar->setEditable(false);
-    }
-
-    const QVariantList reminders = data.value(QStringLiteral("defaultReminders")).toList();
-    for (const QVariant &r : reminders) {
-        QVariantMap reminder = r.toMap();
-
-        ReminderPtr rem(new Reminder());
-        if (reminder.value(QStringLiteral("method")).toString() == QLatin1String("email")) {
-            rem->setType(KCalendarCore::Alarm::Email);
-        } else if (reminder.value(QStringLiteral("method")).toString() == QLatin1String("popup")) {
-            rem->setType(KCalendarCore::Alarm::Display);
-        } else {
-            rem->setType(KCalendarCore::Alarm::Invalid);
-        }
-
-        rem->setStartOffset(KCalendarCore::Duration(reminder.value(QStringLiteral("minutes")).toInt() * (-60)));
-
-        calendar->addDefaultReminer(rem);
-    }
-
     return calendar.dynamicCast<Object>();
 }
 
@@ -268,29 +183,7 @@ QByteArray calendarToJSON(const CalendarPtr& calendar)
 
 ObjectsList parseCalendarJSONFeed(const QByteArray& jsonFeed, FeedData& feedData)
 {
-    QJsonDocument document = QJsonDocument::fromJson(jsonFeed);
-    QVariantMap data = document.toVariant().toMap();
-
-    ObjectsList list;
-
-    if (data.value(QStringLiteral("kind")) == QLatin1String("calendar#calendarList")) {
-        if (data.contains(QStringLiteral("nextPageToken"))) {
-            feedData.nextPageUrl = fetchCalendarsUrl();
-            QUrlQuery query(feedData.nextPageUrl);
-            query.addQueryItem(QStringLiteral("pageToken"), data.value(QStringLiteral("nextPageToken")).toString());
-            feedData.nextPageUrl.setQuery(query);
-        }
-    } else {
-        return ObjectsList();
-    }
-
-    const QVariantList items = data.value(QStringLiteral("items")).toList();
-    list.reserve(items.size());
-    for (const QVariant &i : items) {
-        list.append(Private::JSONToCalendar(i.toMap()));
-    }
-
-    return list;
+    return {};
 }
 
 EventPtr JSONToEvent(const QByteArray& jsonData)
@@ -298,7 +191,6 @@ EventPtr JSONToEvent(const QByteArray& jsonData)
     QJsonParseError error;
     QJsonDocument document = QJsonDocument::fromJson(jsonData, &error);
     if (error.error != QJsonParseError::NoError) {
-        qCWarning(KGAPIDebug) << "Error parsing event JSON: " << error.errorString();
     }
     QVariantMap data = document.toVariant().toMap();
     if (data.value(QStringLiteral("kind")) != QLatin1String("calendar#event")) {
@@ -317,40 +209,7 @@ struct ParsedDt {
 
 ParsedDt parseDt(const QVariantMap &data, const QString &timezone, bool isDtEnd)
 {
-    if (data.contains(QStringLiteral("date"))) {
-        auto dt = QDateTime::fromString(data.value(QStringLiteral("date")).toString(), Qt::ISODate);
-        if (isDtEnd) {
-            // Google reports all-day events to end on the next day, e.g. a
-            // Monday all-day event will be reporting as starting on Monday and
-            // ending on Tuesday, while KCalendarCore/iCal uses the same day for
-            // dtEnd, so adjust the end date here.
-            dt = dt.addDays(-1);
-        }
-        return {dt, true};
-    } else if (data.contains(QStringLiteral("dateTime"))) {
-        auto dt = Utils::rfc3339DateFromString(data.value(QStringLiteral("dateTime")).toString());
-        // If there's a timezone specified in the "start" entity, then use it
-        if (data.contains(QStringLiteral("timeZone"))) {
-            const QTimeZone tz = QTimeZone(data.value(QStringLiteral("timeZone")).toString().toUtf8());
-            if (tz.isValid()) {
-                dt = dt.toTimeZone(tz);
-            } else {
-                qCWarning(KGAPIDebug) << "Invalid timezone" << data.value(QStringLiteral("timeZone")).toString();
-            }
-
-            // Otherwise try to fallback to calendar-wide timezone
-        } else if (!timezone.isEmpty()) {
-            const QTimeZone tz(timezone.toUtf8());
-            if (tz.isValid()) {
-                dt.setTimeZone(tz);
-            } else {
-                qCWarning(KGAPIDebug) << "Invalid timezone" << timezone;
-            }
-        }
-        return {dt, false};
-    } else {
-        return {{}, false};
-    }
+    return {{}, false};
 }
 
 }
@@ -358,178 +217,6 @@ ParsedDt parseDt(const QVariantMap &data, const QString &timezone, bool isDtEnd)
 ObjectPtr Private::JSONToEvent(const QVariantMap& data, const QString &timezone)
 {
     EventPtr event(new Event);
-
-    /* ID */
-    event->setId(data.value(QStringLiteral("id")).toString());
-
-    /* UID */
-    event->setUid(data.value(QStringLiteral("iCalUID")).toString());
-
-    /* ETAG */
-    event->setEtag(data.value(QStringLiteral("etag")).toString());
-
-    /* Status */
-    if (data.value(QStringLiteral("status")).toString() == QLatin1String("confirmed")) {
-        event->setStatus(KCalendarCore::Incidence::StatusConfirmed);
-    } else if (data.value(QStringLiteral("status")).toString() == QLatin1String("cancelled")) {
-        event->setStatus(KCalendarCore::Incidence::StatusCanceled);
-        event->setDeleted(true);
-    } else if (data.value(QStringLiteral("status")).toString() == QLatin1String("tentative")) {
-        event->setStatus(KCalendarCore::Incidence::StatusTentative);
-    } else {
-        event->setStatus(KCalendarCore::Incidence::StatusNone);
-    }
-
-    /* Created */
-    event->setCreated(Utils::rfc3339DateFromString(data.value(QStringLiteral("created")).toString()));
-
-    /* Last updated */
-    event->setLastModified(Utils::rfc3339DateFromString(data.value(QStringLiteral("updated")).toString()));
-
-    /* Summary */
-    event->setSummary(data.value(QStringLiteral("summary")).toString());
-
-    /* Description */
-    event->setDescription(data.value(QStringLiteral("description")).toString());
-
-    /* Location */
-    event->setLocation(data.value(QStringLiteral("location")).toString());
-
-    /* Start date */
-    const auto dtStart = parseDt(data.value(QStringLiteral("start")).toMap(), timezone, false);
-    event->setDtStart(dtStart.dt);
-    event->setAllDay(dtStart.isAllDay);
-
-    /* End date */
-    const auto dtEnd = parseDt(data.value(QStringLiteral("end")).toMap(), timezone, true);
-    event->setDtEnd(dtEnd.dt);
-
-    /* Recurrence ID */
-    if (data.contains(QStringLiteral("originalStartTime"))) {
-        const auto recurrenceId = parseDt(data.value(QStringLiteral("originalStartTime")).toMap(), timezone, false);
-        event->setRecurrenceId(recurrenceId.dt);
-    }
-
-    /* Transparency */
-    if (data.value(QStringLiteral("transparency")).toString() == QLatin1String("transparent")) {
-        event->setTransparency(Event::Transparent);
-    } else { /* Assume opaque as default transparency */
-        event->setTransparency(Event::Opaque);
-    }
-
-    /* Attendees */
-    const QVariantList attendees = data.value(QStringLiteral("attendees")).toList();
-    for (const QVariant & a : attendees) {
-        QVariantMap att = a.toMap();
-        KCalendarCore::Attendee attendee(
-                        att.value(QStringLiteral("displayName")).toString(),
-                        att.value(QStringLiteral("email")).toString());
-
-        if (att.value(QStringLiteral("responseStatus")).toString() == QLatin1String("accepted"))
-            attendee.setStatus(KCalendarCore::Attendee::Accepted);
-        else if (att.value(QStringLiteral("responseStatus")).toString() == QLatin1String("declined"))
-            attendee.setStatus(KCalendarCore::Attendee::Declined);
-        else if (att.value(QStringLiteral("responseStatus")).toString() == QLatin1String("tentative"))
-            attendee.setStatus(KCalendarCore::Attendee::Tentative);
-        else
-            attendee.setStatus(KCalendarCore::Attendee::NeedsAction);
-
-        if (att.value(QStringLiteral("optional")).toBool()) {
-            attendee.setRole(KCalendarCore::Attendee::OptParticipant);
-        }
-        const auto uid = att.value(QStringLiteral("id")).toString();
-        if (!uid.isEmpty()) {
-            attendee.setUid(uid);
-        } else {
-            // Set some UID, just so that the results are reproducible
-            attendee.setUid(QString::number(qHash(attendee.email())));
-        }
-        event->addAttendee(attendee, true);
-    }
-
-    /* According to RFC, only events with attendees can have an organizer.
-     * Google seems to ignore it, so we must take care of it here */
-    if (event->attendeeCount() > 0) {
-        KCalendarCore::Person organizer;
-        QVariantMap organizerData = data.value(QStringLiteral("organizer")).toMap();
-        organizer.setName(organizerData.value(QStringLiteral("displayName")).toString());
-        organizer.setEmail(organizerData.value(QStringLiteral("email")).toString());
-        event->setOrganizer(organizer);
-    }
-
-    /* Recurrence */
-    const QStringList recrs = data.value(QStringLiteral("recurrence")).toStringList();
-    for (const QString & rec : recrs) {
-        KCalendarCore::ICalFormat format;
-        if (rec.left(5) == QLatin1String("RRULE")) {
-            KCalendarCore::RecurrenceRule *recurrenceRule = new KCalendarCore::RecurrenceRule();
-            format.fromString(recurrenceRule, rec.mid(6));
-            recurrenceRule->setRRule(rec);
-            event->recurrence()->addRRule(recurrenceRule);
-        } else if (rec.left(6) == QLatin1String("EXRULE")) {
-            KCalendarCore::RecurrenceRule *recurrenceRule = new KCalendarCore::RecurrenceRule();
-            format.fromString(recurrenceRule, rec.mid(7));
-            recurrenceRule->setRRule(rec);
-            event->recurrence()->addExRule(recurrenceRule);
-        } else if (rec.left(6) == QLatin1String("EXDATE")) {
-            KCalendarCore::DateList exdates = Private::parseRDate(rec);
-            event->recurrence()->setExDates(exdates);
-        } else if (rec.left(5) == QLatin1String("RDATE")) {
-            KCalendarCore::DateList rdates = Private::parseRDate(rec);
-            event->recurrence()->setRDates(rdates);
-        }
-    }
-
-    QVariantMap reminders = data.value(QStringLiteral("reminders")).toMap();
-    if (reminders.contains(QStringLiteral("useDefault")) && reminders.value(QStringLiteral("useDefault")).toBool()) {
-        event->setUseDefaultReminders(true);
-    } else {
-        event->setUseDefaultReminders(false);
-    }
-
-    const QVariantList overrides = reminders.value(QStringLiteral("overrides")).toList();
-    for (const QVariant & r : overrides) {
-        QVariantMap override = r.toMap();
-        KCalendarCore::Alarm::Ptr alarm(new KCalendarCore::Alarm(static_cast<KCalendarCore::Incidence*>(event.data())));
-        alarm->setTime(event->dtStart());
-
-        if (override.value(QStringLiteral("method")).toString() == QLatin1String("popup")) {
-            alarm->setType(KCalendarCore::Alarm::Display);
-        } else if (override.value(QStringLiteral("method")).toString() == QLatin1String("email")) {
-            alarm->setType(KCalendarCore::Alarm::Email);
-        } else {
-            alarm->setType(KCalendarCore::Alarm::Invalid);
-            continue;
-        }
-
-        alarm->setStartOffset(KCalendarCore::Duration(override.value(QStringLiteral("minutes")).toInt() * (-60)));
-        alarm->setEnabled(true);
-        event->addAlarm(alarm);
-    }
-
-    /* Extended properties */
-    QVariantMap extendedProperties = data.value(QStringLiteral("extendedProperties")).toMap();
-
-    QVariantMap privateProperties = extendedProperties.value(QStringLiteral("private")).toMap();
-    QMap< QString, QVariant >::const_iterator iter = privateProperties.constBegin();
-    while (iter != privateProperties.constEnd()) {
-        if (iter.key() == QLatin1String("categories")) {
-            event->setCategories(iter.value().toString());
-        }
-
-        ++iter;
-    }
-
-    QVariantMap sharedProperties = extendedProperties.value(QStringLiteral("shared")).toMap();
-    iter = sharedProperties.constBegin();
-    while (iter != sharedProperties.constEnd()) {
-        if (iter.key() == QLatin1String("categories")) {
-            event->setCategories(iter.value().toString());
-        }
-
-        ++iter;
-    }
-
     return event.dynamicCast<Object>();
 }
 
@@ -570,217 +257,12 @@ QVariantMap serializeDt(const EventPtr &event, const QDateTime &dt, SerializeDtF
 
 QByteArray eventToJSON(const EventPtr& event, EventSerializeFlags flags)
 {
-    QVariantMap data;
-
-    /* Type */
-    data.insert(QStringLiteral("kind"), QStringLiteral("calendar#event"));
-
-    /* ID */
-    if (!(flags & EventSerializeFlag::NoID)) {
-        data.insert(QStringLiteral("id"), event->id());
-    }
-
-    /* UID */
-    data.insert(QStringLiteral("iCalUID"), event->uid());
-
-    /* Status */
-    if (event->status() == KCalendarCore::Incidence::StatusConfirmed) {
-        data.insert(QStringLiteral("status"), QStringLiteral("confirmed"));
-    } else if (event->status() == KCalendarCore::Incidence::StatusCanceled) {
-        data.insert(QStringLiteral("status"), QStringLiteral("canceled"));
-    } else if (event->status() == KCalendarCore::Incidence::StatusTentative) {
-        data.insert(QStringLiteral("status"), QStringLiteral("tentative"));
-    }
-
-    /* Summary */
-    data.insert(QStringLiteral("summary"), event->summary());
-
-    /* Description */
-    data.insert(QStringLiteral("description"), event->description());
-
-    /* Location */
-    data.insert(QStringLiteral("location"), event->location());
-
-    /* Recurrence */
-    QVariantList recurrence;
-    KCalendarCore::ICalFormat format;
-    const auto exRules = event->recurrence()->exRules();
-    const auto rRules = event->recurrence()->rRules();
-    recurrence.reserve(rRules.size() + rRules.size() + 2);
-    for (KCalendarCore::RecurrenceRule *rRule : rRules) {
-        recurrence << format.toString(rRule).remove(QStringLiteral("\r\n"));
-    }
-
-    for (KCalendarCore::RecurrenceRule *rRule : exRules) {
-        recurrence << format.toString(rRule).remove(QStringLiteral("\r\n"));
-    }
-
-    QStringList dates;
-    const auto rDates = event->recurrence()->rDates();
-    dates.reserve(rDates.size());
-    for (const QDate & rDate : rDates) {
-        dates << rDate.toString(QStringLiteral("yyyyMMdd"));
-    }
-
-    if (!dates.isEmpty()) {
-        recurrence << QString(QStringLiteral("RDATE;VALUE=DATA:") + dates.join(QStringLiteral(",")));
-    }
-
-    dates.clear();
-    const auto exDates = event->recurrence()->exDates();
-    dates.reserve(exDates.size());
-    for (const QDate & exDate : exDates) {
-        dates << exDate.toString(QStringLiteral("yyyyMMdd"));
-    }
-
-    if (!dates.isEmpty()) {
-        recurrence << QString(QStringLiteral("EXDATE;VALUE=DATE:") + dates.join(QStringLiteral(",")));
-    }
-
-    if (!recurrence.isEmpty()) {
-        data.insert(QStringLiteral("recurrence"), recurrence);
-    }
-
-    SerializeDtFlags dtFlags;
-    if (event->allDay()) {
-        dtFlags |= SerializeDtFlag::AllDay;
-    }
-    if (!recurrence.isEmpty()) {
-        dtFlags |= SerializeDtFlag::HasRecurrence;
-    }
-
-    /* Start */
-    data.insert(QStringLiteral("start"), serializeDt(event, event->dtStart(), dtFlags));
-
-    /* End */
-    data.insert(QStringLiteral("end"), serializeDt(event, event->dtEnd(), dtFlags | SerializeDtFlag::IsDtEnd));
-
-    if (event->hasRecurrenceId()) {
-        data.insert(QStringLiteral("originalStartTime"), serializeDt(event, event->recurrenceId(), dtFlags));
-        data.insert(QStringLiteral("recurringEventId"), event->id());
-    }
-
-    /* Transparency */
-    if (event->transparency() == Event::Transparent) {
-        data.insert(QStringLiteral("transparency"), QStringLiteral("transparent"));
-    } else {
-        data.insert(QStringLiteral("transparency"), QStringLiteral("opaque"));
-    }
-
-    /* Attendees */
-    QVariantList atts;
-    Q_FOREACH(const KCalendarCore::Attendee& attee, event->attendees()) {
-        QVariantMap att;
-
-        att.insert(QStringLiteral("displayName"), attee.name());
-        att.insert(QStringLiteral("email"), attee.email());
-
-        if (attee.status() == KCalendarCore::Attendee::Accepted) {
-            att.insert(QStringLiteral("responseStatus"), QStringLiteral("accepted"));
-        } else if (attee.status() == KCalendarCore::Attendee::Declined) {
-            att.insert(QStringLiteral("responseStatus"), QStringLiteral("declined"));
-        } else if (attee.status() == KCalendarCore::Attendee::Tentative) {
-            att.insert(QStringLiteral("responseStatus"), QStringLiteral("tentative"));
-        } else {
-            att.insert(QStringLiteral("responseStatus"), QStringLiteral("needsAction"));
-        }
-
-        if (attee.role() == KCalendarCore::Attendee::OptParticipant) {
-            att.insert(QStringLiteral("optional"), true);
-        }
-        if (!attee.uid().isEmpty()) {
-            att.insert(QStringLiteral("id"), attee.uid());
-        }
-        atts.append(att);
-    }
-
-    if (!atts.isEmpty()) {
-        data.insert(QStringLiteral("attendees"), atts);
-
-        /* According to RFC, event without attendees should not have
-         * any organizer. */
-        KCalendarCore::Person organizer = event->organizer();
-        if (!organizer.isEmpty()) {
-            QVariantMap org;
-            org.insert(QStringLiteral("displayName"), organizer.fullName());
-            org.insert(QStringLiteral("email"), organizer.email());
-            data.insert(QStringLiteral("organizer"), org);
-        }
-    }
-
-    /* Reminders */
-    QVariantList overrides;
-    Q_FOREACH(const KCalendarCore::Alarm::Ptr &alarm, event->alarms()) {
-        QVariantMap override;
-
-        if (alarm->type() == KCalendarCore::Alarm::Display) {
-            override.insert(QStringLiteral("method"), QLatin1String("popup"));
-        } else if (alarm->type() == KCalendarCore::Alarm::Email) {
-            override.insert(QStringLiteral("method"), QLatin1String("email"));
-        } else {
-            continue;
-        }
-
-        override.insert(QStringLiteral("minutes"),  (int)(alarm->startOffset().asSeconds() / -60));
-
-        overrides << override;
-    }
-
-    QVariantMap reminders;
-    reminders.insert(QStringLiteral("useDefault"), false);
-    reminders.insert(QStringLiteral("overrides"), overrides);
-    data.insert(QStringLiteral("reminders"), reminders);
-
-    /* Store categories */
-    if (!event->categories().isEmpty()) {
-        QVariantMap extendedProperties;
-        QVariantMap sharedProperties;
-        sharedProperties.insert(QStringLiteral("categories"), event->categoriesStr());
-        extendedProperties.insert(QStringLiteral("shared"), sharedProperties);
-        data.insert(QStringLiteral("extendedProperties"), extendedProperties);
-    }
-
-    /* TODO: Implement support for additional features:
-     * http://code.google.com/apis/gdata/docs/2.0/elements.html
-     */
-
-    QJsonDocument document = QJsonDocument::fromVariant(data);
-    return document.toJson(QJsonDocument::Compact);
+    return {};
 }
 
 ObjectsList parseEventJSONFeed(const QByteArray& jsonFeed, FeedData& feedData)
 {
-    QJsonDocument document = QJsonDocument::fromJson(jsonFeed);
-    QVariantMap data = document.toVariant().toMap();
-
-    QString timezone;
-    if (data.value(QStringLiteral("kind")) == QLatin1String("calendar#events")) {
-        if (data.contains(QStringLiteral("nextPageToken"))) {
-            QString calendarId = feedData.requestUrl.toString().remove(QStringLiteral("https://www.googleapis.com/calendar/v3/calendars/"));
-            calendarId = calendarId.left(calendarId.indexOf(QLatin1Char('/')));
-            feedData.nextPageUrl = feedData.requestUrl;
-            // replace the old pageToken with a new one
-            QUrlQuery query(feedData.nextPageUrl);
-            query.removeQueryItem(QStringLiteral("pageToken"));
-            query.addQueryItem(QStringLiteral("pageToken"), data.value(QStringLiteral("nextPageToken")).toString());
-            feedData.nextPageUrl.setQuery(query);
-        }
-        if (data.contains(QStringLiteral("timeZone"))) {
-            // This should always be in Olson format
-            timezone = data.value(QStringLiteral("timeZone")).toString();
-        }
-    } else {
-        return ObjectsList();
-    }
-
-    ObjectsList list;
-    const QVariantList items = data.value(QStringLiteral("items")).toList();
-    list.reserve(items.size());
-    for (const QVariant &i : items) {
-        list.append(Private::JSONToEvent(i.toMap(), timezone));
-    }
-
-    return list;
+    return {};
 }
 
 /******************************** PRIVATE ***************************************/
diff --git a/src/calendar/event.cpp b/src/calendar/event.cpp
index 44b810d..b4b84ad 100644
--- a/src/calendar/event.cpp
+++ b/src/calendar/event.cpp
@@ -84,11 +84,9 @@ bool Event::operator==(const Event &other) const
         return false;
     }
     if (d->deleted != other.d->deleted) {
-        qCDebug(KGAPIDebug) << "Deleted does not match";
         return false;
     }
     if (d->useDefaultReminders != other.d->useDefaultReminders) {
-        qCDebug(KGAPIDebug) << "UseDefaultReminders does not match";
         return false;
     }
 
diff --git a/src/calendar/eventcreatejob.cpp b/src/calendar/eventcreatejob.cpp
index 59ef9fe..edc13f7 100644
--- a/src/calendar/eventcreatejob.cpp
+++ b/src/calendar/eventcreatejob.cpp
@@ -79,26 +79,6 @@ SendUpdatesPolicy EventCreateJob::sendUpdates() const
 
 void EventCreateJob::start()
 {
-    if (d->events.atEnd()) {
-        emitFinished();
-        return;
-    }
-
-    const EventPtr event = d->events.current();
-    const QUrl url = CalendarService::createEventUrl(d->calendarId, d->updatesPolicy);
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", CalendarService::APIVersion().toLatin1());
-
-    const QByteArray rawData = CalendarService::eventToJSON(event, CalendarService::EventSerializeFlag::NoID);
-
-    QStringList headers;
-    auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : qAsConst(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    enqueueRequest(request, rawData, QStringLiteral("application/json"));
 }
 
 ObjectsList EventCreateJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray& rawData)
diff --git a/src/calendar/eventdeletejob.cpp b/src/calendar/eventdeletejob.cpp
index 5173dfb..be71a31 100644
--- a/src/calendar/eventdeletejob.cpp
+++ b/src/calendar/eventdeletejob.cpp
@@ -80,24 +80,6 @@ EventDeleteJob::~EventDeleteJob()
 
 void EventDeleteJob::start()
 {
-    if (d->eventsIds.atEnd()) {
-        emitFinished();
-        return;
-    }
-
-    const QString eventId = d->eventsIds.current();
-    const QUrl url = CalendarService::removeEventUrl(d->calendarId, eventId);
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", CalendarService::APIVersion().toLatin1());
-
-    QStringList headers;
-    auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : qAsConst(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    enqueueRequest(request);
 }
 
 void EventDeleteJob::handleReply(const QNetworkReply* reply, const QByteArray& rawData)
diff --git a/src/calendar/eventfetchjob.cpp b/src/calendar/eventfetchjob.cpp
index 41889b5..e0cc0b8 100644
--- a/src/calendar/eventfetchjob.cpp
+++ b/src/calendar/eventfetchjob.cpp
@@ -172,29 +172,6 @@ QString EventFetchJob::filter() const
 
 void EventFetchJob::start()
 {
-    QUrl url;
-    if (d->eventId.isEmpty()) {
-        url = CalendarService::fetchEventsUrl(d->calendarId);
-        QUrlQuery query(url);
-        query.addQueryItem(QStringLiteral("showDeleted"), Utils::bool2Str(d->fetchDeleted));
-        if (!d->filter.isEmpty()) {
-            query.addQueryItem(QStringLiteral("q"), d->filter);
-        }
-        if (d->updatedTimestamp > 0) {
-            query.addQueryItem(QStringLiteral("updatedMin"), Utils::ts2Str(d->updatedTimestamp));
-        }
-        if (d->timeMin > 0) {
-            query.addQueryItem(QStringLiteral("timeMin"), Utils::ts2Str(d->timeMin));
-        }
-        if (d->timeMax > 0) {
-            query.addQueryItem(QStringLiteral("timeMax"), Utils::ts2Str(d->timeMax));
-        }
-        url.setQuery(query);
-    } else {
-        url = CalendarService::fetchEventUrl(d->calendarId, d->eventId);
-    }
-    const QNetworkRequest request = d->createRequest(url);
-    enqueueRequest(request);
 }
 
 ObjectsList EventFetchJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray& rawData)
@@ -217,11 +194,6 @@ ObjectsList EventFetchJob::handleReplyWithItems(const QNetworkReply *reply, cons
         return items;
     }
 
-    if (feedData.nextPageUrl.isValid()) {
-        const QNetworkRequest request = d->createRequest(feedData.nextPageUrl);
-        enqueueRequest(request);
-    }
-
     return items;
 }
 
diff --git a/src/calendar/eventmodifyjob.cpp b/src/calendar/eventmodifyjob.cpp
index 7d36144..aeb8183 100644
--- a/src/calendar/eventmodifyjob.cpp
+++ b/src/calendar/eventmodifyjob.cpp
@@ -78,26 +78,6 @@ SendUpdatesPolicy EventModifyJob::sendUpdates() const
 
 void EventModifyJob::start()
 {
-    if (d->events.atEnd()) {
-        emitFinished();
-        return;
-    }
-
-    const EventPtr event = d->events.current();
-    const QUrl url = CalendarService::updateEventUrl(d->calendarId, event->id(), d->updatesPolicy);
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", CalendarService::APIVersion().toLatin1());
-
-    const QByteArray rawData = CalendarService::eventToJSON(event);
-
-    QStringList headers;
-    auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : qAsConst(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    enqueueRequest(request, rawData, QStringLiteral("application/json"));
 }
 
 ObjectsList EventModifyJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray& rawData)
diff --git a/src/calendar/eventmovejob.cpp b/src/calendar/eventmovejob.cpp
index f0915c9..bcce02f 100644
--- a/src/calendar/eventmovejob.cpp
+++ b/src/calendar/eventmovejob.cpp
@@ -55,24 +55,6 @@ EventMoveJob::Private::Private(EventMoveJob *parent):
 
 void EventMoveJob::Private::processNextEvent()
 {
-   if (eventsIds.atEnd()) {
-        q->emitFinished();
-        return;
-    }
-
-    const QString eventId = eventsIds.current();
-    const QUrl url = CalendarService::moveEventUrl(source, destination, eventId);
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", CalendarService::APIVersion().toLatin1());
-
-    QStringList headers;
-    auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : qAsConst(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    q->enqueueRequest(request);
 }
 
 EventMoveJob::EventMoveJob(const EventPtr &event, const QString &sourceCalendarId,
diff --git a/src/calendar/freebusyqueryjob.cpp b/src/calendar/freebusyqueryjob.cpp
index b884ec0..a05a865 100644
--- a/src/calendar/freebusyqueryjob.cpp
+++ b/src/calendar/freebusyqueryjob.cpp
@@ -81,20 +81,6 @@ QDateTime FreeBusyQueryJob::timeMax() const
 
 void FreeBusyQueryJob::start()
 {
-    QVariantMap requestData({
-        { QStringLiteral("timeMin"), Utils::rfc3339DateToString(d->timeMin) },
-        { QStringLiteral("timeMax"), Utils::rfc3339DateToString(d->timeMax) },
-        { QStringLiteral("items"), 
-            QVariantList({
-                QVariantMap({ { QStringLiteral("id"), d->id } })
-            })
-        }});
-    QJsonDocument document = QJsonDocument::fromVariant(requestData);
-    const QByteArray json = document.toJson(QJsonDocument::Compact);
-
-    QNetworkRequest request(CalendarService::freeBusyQueryUrl());
-    request.setRawHeader("GData-Version", CalendarService::APIVersion().toLatin1());
-    enqueueRequest(request, json, QStringLiteral("application/json"));
 }
 
 void FreeBusyQueryJob::dispatchRequest(QNetworkAccessManager *accessManager,
