diff --git a/src/latitude/latitudeservice.cpp b/src/latitude/latitudeservice.cpp
index c9905f9..3731a50 100644
--- a/src/latitude/latitudeservice.cpp
+++ b/src/latitude/latitudeservice.cpp
@@ -34,9 +34,9 @@ namespace Private
 {
     LocationPtr parseLocation(const QVariantMap &map);
 
-    static const QUrl GoogleApisUrl(QStringLiteral("https://www.googleapis.com"));
-    static const QString LocationBasePath(QStringLiteral("/latitude/v1/location"));
-    static const QString CurrentLocationBasePath(QStringLiteral("/latitude/v1/currentLocation"));
+    static const QUrl GoogleApisUrl;
+    static const QString LocationBasePath;
+    static const QString CurrentLocationBasePath;
 }
 
 LocationPtr JSONToLocation(const QByteArray & jsonData)
diff --git a/src/latitude/locationcreatejob.cpp b/src/latitude/locationcreatejob.cpp
index 88c217f..a9849ef 100644
--- a/src/latitude/locationcreatejob.cpp
+++ b/src/latitude/locationcreatejob.cpp
@@ -62,26 +62,6 @@ LocationCreateJob::~LocationCreateJob()
 
 void LocationCreateJob::start()
 {
-    QUrl url;
-    if (d->isCurrent) {
-        url = LatitudeService::insertCurrentLocationUrl();
-    } else {
-        url = LatitudeService::insertLocationUrl();
-    }
-
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", LatitudeService::APIVersion().toLatin1());
-
-    const QByteArray rawData = LatitudeService::locationToJSON(d->location);
-
-    QStringList headers;
-    const auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : qAsConst(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    enqueueRequest(request, rawData, QStringLiteral("application/json"));
 }
 
 ObjectsList LocationCreateJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray& rawData)
diff --git a/src/latitude/locationdeletejob.cpp b/src/latitude/locationdeletejob.cpp
index 7872245..8705d88 100644
--- a/src/latitude/locationdeletejob.cpp
+++ b/src/latitude/locationdeletejob.cpp
@@ -76,30 +76,6 @@ LocationDeleteJob::~LocationDeleteJob()
 
 void LocationDeleteJob::start()
 {
-    if (d->finished) {
-        emitFinished();
-        return;
-    }
-
-    QUrl url;
-    if (d->locationId > 0) {
-        url = LatitudeService::deleteLocationUrl(d->locationId);
-    } else {
-        url = LatitudeService::deleteCurrentLocationUrl();
-    }
-
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", LatitudeService::APIVersion().toLatin1());
-
-    QStringList headers;
-    const auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : qAsConst(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    enqueueRequest(request);
-    d->finished = true;
 }
 
 
diff --git a/src/latitude/locationfetchhistoryjob.cpp b/src/latitude/locationfetchhistoryjob.cpp
index 0dacab4..d2d70aa 100644
--- a/src/latitude/locationfetchhistoryjob.cpp
+++ b/src/latitude/locationfetchhistoryjob.cpp
@@ -59,10 +59,7 @@ LocationFetchHistoryJob::Private::Private(LocationFetchHistoryJob *parent):
 
 QNetworkRequest LocationFetchHistoryJob::Private::createRequest(const QUrl& url)
 {
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", LatitudeService::APIVersion().toLatin1());
-
-    return request;
+    return QNetworkRequest(QUrl());
 }
 
 
@@ -131,10 +128,6 @@ void LocationFetchHistoryJob::setMaxTimestamp(qlonglong maxTimestamp)
 
 void LocationFetchHistoryJob::start()
 {
-    const QUrl url = LatitudeService::locationHistoryUrl(d->granularity, d->maxResults, d->maxTimestamp, d->minTimestamp);
-    const QNetworkRequest request = d->createRequest(url);
-
-    enqueueRequest(request);
 }
 
 ObjectsList LocationFetchHistoryJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray& rawData)
@@ -152,8 +145,6 @@ ObjectsList LocationFetchHistoryJob::handleReplyWithItems(const QNetworkReply *r
     }
 
     if (feedData.nextPageUrl.isValid()) {
-        const QNetworkRequest request = d->createRequest(feedData.nextPageUrl);
-        enqueueRequest(request);
     }
 
     return items;
diff --git a/src/latitude/locationfetchjob.cpp b/src/latitude/locationfetchjob.cpp
index 40539ce..a0b4abf 100644
--- a/src/latitude/locationfetchjob.cpp
+++ b/src/latitude/locationfetchjob.cpp
@@ -87,10 +87,6 @@ void LocationFetchJob::start()
     } else {
         url = LatitudeService::retrieveLocationUrl(d->timestamp, d->granularity);
     }
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", LatitudeService::APIVersion().toLatin1());
-
-    enqueueRequest(request);
 }
 
 ObjectsList LocationFetchJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray& rawData)
diff --git a/src/staticmaps/staticmapurl.cpp b/src/staticmaps/staticmapurl.cpp
index d718179..095fde2 100644
--- a/src/staticmaps/staticmapurl.cpp
+++ b/src/staticmaps/staticmapurl.cpp
@@ -364,136 +364,5 @@ void StaticMapUrl::setZoomLevel(const quint32 zoom)
 
 QUrl StaticMapUrl::url() const
 {
-    QUrl url(QStringLiteral("http://maps.googleapis.com/maps/api/staticmap"));
-    QUrlQuery query(url);
-
-    if (d->locationType != Undefined) {
-        QString param;
-
-        switch (d->locationType) {
-        case Undefined:
-        case String:
-            param = d->locationString;
-            param = param.replace(QLatin1String(", "), QLatin1String(","));
-            param = param.replace(QLatin1String(". "), QLatin1String("."));
-            param = param.replace(QLatin1Char(' '), QLatin1Char('+'));
-            query.addQueryItem(QStringLiteral("center"), param);
-            break;
-        case KABCAddress:
-            param = d->locationAddress.formattedAddress();
-            param = param.replace(QLatin1String(", "), QLatin1String(","));
-            param = param.replace(QLatin1String(". "), QLatin1String("."));
-            param = param.replace(QLatin1Char(' '), QLatin1Char('+'));
-            param = param.replace(QLatin1Char('\n'), QLatin1Char(','));
-            query.addQueryItem(QStringLiteral("center"), param);
-            break;
-        case KABCGeo:
-            param = QString::number(d->locationGeo.latitude()) + QLatin1Char(',') +
-                    QString::number(d->locationGeo.longitude());
-            query.addQueryItem(QStringLiteral("center"), param);
-            break;
-        }
-    }
-
-    if (d->zoom != -1)
-        query.addQueryItem(QStringLiteral("zoom"), QString::number(d->zoom));
-
-    if (!d->size.isEmpty()) {
-        QString size = QString::number(d->size.width()) + QLatin1Char('x') +
-                       QString::number(d->size.height());
-        query.addQueryItem(QStringLiteral("size"), size);
-    }
-
-    if (d->scale != Normal)
-        query.addQueryItem(QStringLiteral("scale"), QString::number(2));
-    if (d->format != PNG) {
-        QString format;
-
-        switch (d->format) {
-        case PNG:
-        case PNG32:
-            format = QStringLiteral("png32");
-            break;
-        case GIF:
-            format = QStringLiteral("gif");
-            break;
-        case JPG:
-            format = QStringLiteral("jpg");
-            break;
-        case JPGBaseline:
-            format = QStringLiteral("jpg-baseline");
-            break;
-        }
-
-        query.addQueryItem(QStringLiteral("format"), format);
-    }
-
-    if (d->maptype != Roadmap) {
-        QString maptype;
-
-        switch (d->maptype) {
-        case Roadmap:
-        case Satellite:
-            maptype = QStringLiteral("satellite");
-            break;
-        case Terrain:
-            maptype = QStringLiteral("terrain");
-            break;
-        case Hybrid:
-            maptype = QStringLiteral("hybrid");
-            break;
-        }
-
-        query.addQueryItem(QStringLiteral("maptype"), maptype);
-    }
-
-    for (const StaticMapMarker & marker : qAsConst(d->markers)) {
-
-        if (marker.isValid())
-            query.addQueryItem(QStringLiteral("markers"), marker.toString());
-    }
-
-    for (const StaticMapPath & path : qAsConst(d->paths)) {
-
-        if (path.isValid())
-            query.addQueryItem(QStringLiteral("path"), path.toString());
-
-    }
-
-    if (d->visibleLocationType != Undefined) {
-
-        QString param;
-
-        switch (d->visibleLocationType) {
-        case Undefined:
-        case String:
-            param = d->visibleString;
-            param = param.replace(QLatin1String(", "), QLatin1String(","));
-            param = param.replace(QLatin1String(". "), QLatin1String("."));
-            param = param.replace(QLatin1Char(' '), QLatin1Char('+'));
-            query.addQueryItem(QStringLiteral("visible"), param);
-            break;
-        case KABCAddress:
-            param = d->visibleAddress.formattedAddress();
-            param = param.replace(QLatin1String(", "), QLatin1String(","));
-            param = param.replace(QLatin1String(". "), QLatin1String("."));
-            param = param.replace(QLatin1Char(' '), QLatin1Char('+'));
-            param = param.replace(QLatin1Char('\n'), QLatin1Char(','));
-            query.addQueryItem(QStringLiteral("visible"), param);
-            break;
-        case KABCGeo:
-            param = QString::number(d->visibleGeo.latitude()) + QLatin1Char(',') +
-                    QString::number(d->visibleGeo.longitude());
-            query.addQueryItem(QStringLiteral("visible"), param);
-            break;
-        }
-    }
-
-    if (d->sensor)
-        query.addQueryItem(QStringLiteral("sensor"), QStringLiteral("true"));
-    else
-        query.addQueryItem(QStringLiteral("sensor"), QStringLiteral("false"));
-
-    url.setQuery(query);
-    return url;
+    return {};
 }
